"use strict";var child_process=require("child_process");const selectFile=({multiSelect:e,root:l,checkFileExists:n})=>`\n  function selectFile {\n    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null\n\n    $form = New-Object System.Windows.Forms.OpenFileDialog\n    $form.CheckFileExists = ${n}\n    $form.initialDirectory = '${l}'\n    $form.multiSelect = ${e}\n    $show = $form.showDialog()\n    if ($show -eq "OK"){\n      $i = 0\n      $names = $form.fileNames\n      foreach ($element in $form.fileNames) {\n        $val = $form.fileNames.length - 1\n      \tif ($i - $val) {\n          $names[$i] = $element + "__win-select-file__!"\n\n        }\n$i++\n      }\n\n      return $names\n\n    } else {\n      write-error "cancelled"\n    }\n  }\n\n  $folder = selectFile\n  write-host $folder\n`;var selectFile$1=(e={},l=[])=>new Promise((n,t)=>{const{root:i="c://",multiSelect:s=1,checkFileExists:o=1}=e,c=child_process.spawn("powershell.exe",[selectFile({multiSelect:s,root:i,checkFileExists:o})]);c.stdout.on("data",e=>{(e=e.toString()).length>1&&(l=[...l,...e.split("__win-select-file__! ")])}),c.stderr.on("data",e=>{(e=e.toString()).includes("cancelled")?n("cancelled"):t(e)}),c.on("exit",()=>{n(l)}),c.stdin.end()});module.exports=selectFile$1;
